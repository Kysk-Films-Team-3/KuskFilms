version: '3.9'

# ============================================
# KYSKFilms - Docker Compose (All-in-One)
# ============================================

services:
  # ============ POSTGRES DATABASE ============
  postgres:
    image: postgres:15-alpine
    container_name: kyskfilms-postgres
    environment:
      POSTGRES_USER: kysk_user
      POSTGRES_PASSWORD: kyskfilms_secure_password
      POSTGRES_DB: postgres
      PGTZ: UTC
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kysk_user -d postgres && psql -U kysk_user -lqt | cut -d '|' -f 1 | grep -qw kyskfilms_db && psql -U kysk_user -lqt | cut -d '|' -f 1 | grep -qw keycloak_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kyskfilms-network
    restart: unless-stopped

  # ============ MINIO (S3 Storage) ============
  minio:
    image: minio/minio:latest
    container_name: kyskfilms-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin_secure
    ports:
      - "9000:9000"   # API
      - "9001:9001"   # Web Console
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - kyskfilms-network
    restart: unless-stopped

  # ============ MINIO INIT (створює bucket) ============
  minio-init:
    image: minio/mc:latest
    container_name: kyskfilms-minio-init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minioadmin minioadmin_secure;
      mc mb --ignore-existing myminio/kyskfilms;
      mc anonymous set download myminio/kyskfilms;
      echo '✓ MinIO bucket kyskfilms created successfully';
      "
    networks:
      - kyskfilms-network
    restart: "no"



  # ============ KEYCLOAK ============

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.2
    container_name: kyskfilms-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak_db
      KC_DB_USERNAME: kysk_user
      KC_DB_PASSWORD: kyskfilms_secure_password
      # Проверенная конфигурация сети для v25
      KC_PROXY: "edge"
      KC_HTTP_ENABLED: "true"
    command: start-dev
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./keycloak/themes:/opt/keycloak/themes:ro
    networks:
      - kyskfilms-network
    restart: unless-stopped



  # ============ KEYCLOAK INIT (імпорт realm з SMTP) ============
  keycloak-init:
    image: alpine:latest
    container_name: kyskfilms-keycloak-init
    depends_on:
      - keycloak
    environment:
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_REALM: kyskfilms
    volumes:
      - ./keycloak/keycloak-init.sh:/scripts/keycloak-init.sh:ro
      - ./keycloak/import:/keycloak/import:ro
    entrypoint: [ "/bin/sh", "-c" ]
    command:
      - |
        apk add --no-cache curl jq bash
        echo "Waiting 60 seconds for Keycloak to start..."
        sleep 60
        /bin/sh /scripts/keycloak-init.sh
    networks:
      - kyskfilms-network
    restart: "no"



  # ============ BACKEND (Spring Boot) ============
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: kyskfilms-backend
    environment:
      SPRING_PROFILES_ACTIVE: prod
      JAVA_OPTS: "-Xmx1024m -Xms512m"
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/kyskfilms_db
      SPRING_DATASOURCE_USERNAME: kysk_user
      SPRING_DATASOURCE_PASSWORD: kyskfilms_secure_password
      KEYCLOAK_AUTH_SERVER_URL: http://keycloak:8080
      KEYCLOAK_REALM: kyskfilms
      KEYCLOAK_CLIENT_ID: kyskfilms-backend
      KEYCLOAK_ISSUER_URI: http://localhost:8081/realms/kyskfilms
      KEYCLOAK_JWK_SET_URI: http://keycloak:8080/realms/kyskfilms/protocol/openid-connect/certs
      MINIO_URL: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin_secure
      MINIO_BUCKET: kyskfilms
      MINIO_REGION: us-east-1
      FRONTEND_URL: http://localhost:3000
      FRONTEND_ALLOWED_ORIGINS: "http://localhost:3000,http://localhost:3001,https://kyskfilms.com"
    ports:
      - "8082:8081"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      keycloak:
        condition: service_started
      minio-init:
        condition: service_completed_successfully
      keycloak-init:
        condition: service_completed_successfully
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - kyskfilms-network
    restart: on-failure:3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ============ FRONTEND (React + Nginx) ============
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_KEYCLOAK_URL: http://localhost:8081
        REACT_APP_BACKEND_URL: http://localhost:8082
    container_name: kyskfilms-frontend
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - kyskfilms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

volumes:
  postgres_data:
    driver: local
    name: kyskfilms_postgres_data
  minio_data:
    driver: local
    name: kyskfilms_minio_data

networks:
  kyskfilms-network:
    driver: bridge
    name: kyskfilms_network